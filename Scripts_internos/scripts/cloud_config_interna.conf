#Para invocar a este fichero hay que exportar
#previamente el directorio de la tarea 'DIR_TAREA'

NOMBRE_TAREA=$(basename "${DIR_TAREA}")

#En equipo remoto
if [ "${NOMBRE_TAREA}" = "" ]; then
	ACTUAL="$(pwd)" && cd .. && ORIGEN="$(pwd)" && cd ${ACTUAL}
	NOMBRE_TAREA="${ORIGEN##*/}"
fi

#### Cargar configuracion
if [ -e "${DIR_TAREA}cloud_${NOMBRE_TAREA}.conf" -a "${DIR_TAREA}" != "" ]; then
	# Uso local
	. "${DIR_TAREA}cloud_${NOMBRE_TAREA}.conf"
elif [ -e "./cloud_${NOMBRE_TAREA}.conf" ]; then	
    # Uso en equipos remotos
    . ./cloud_${NOMBRE_TAREA}.conf
fi

#echo "equipos: $EQUIPOS_LT"
#echo "dir_tarea: $DIR_TAREA"
#exit 1

################### Variables fijas ##########################################################################
# Nombre Tarea: Si no se ha configurado, se obtiene (en local y en remoto) 
# del nombre del directorio padre de este script (carpeta de la Tarea)
# En remoto: este script y ./cloud_tarea.conf cuelgan del directorio que se llama como la Tarea
#ACTUAL="$(pwd)" && cd .. && ORIGEN="$(pwd)" && cd ${ACTUAL}
#TAREA="${ORIGEN##*/}"
#DIR_TAREA="${TAREA}/"
#[ "${NOMBRE_TAREA}" = "" ] && NOMBRE_TAREA="${TAREA}"

# Datos equipo local
# Dir local de cloud
DIR_CLOUD_LOCAL="/opt/nuevo_Cloud/"
DIR_TAREAS="${DIR_CLOUD_LOCAL}Tareas/"
#DIR_CLOUD_LOCAL=$(printf "%s" "${DIR_TAREA%Tareas/*}")
DIR_ENVIO="01-Enviar_Tarea/"
DIR_RECOGIDA="02-Recoger_Tarea/"
#DIR_TAREA_LOCAL="${DIR_CLOUD_LOCAL}${DIR_TAREA}"
#DIR_LOCAL_ENVIO="${DIR_TAREA_LOCAL}${DIR_ENVIO}"
DIR_SCRIPTS_INTERNOS="${DIR_CLOUD_LOCAL}Scripts_internos/scripts/"
DIR_LOCAL_ENVIO="${DIR_SCRIPTS_INTERNOS}${DIR_ENVIO}"	#/opt/nuevo_Cloud/Scripts_internos/scripts/01-Enviar_Tarea/
DIR_LOCAL_RECOGIDAS="${DIR_SCRIPTS_INTERNOS}${DIR_RECOGIDA}"
FILE_CONFIG="cloud_${NOMBRE_TAREA}.conf"	# Fichero con variables a configurar antes del uso
FILE_CONFIG_INTERNA="cloud_config_interna.conf"		# Fichero con variables internas

#Equipos totales
EQUIPOS_TOTALES_DISPONIBLES="01-28"
#Fichero que recoge estado de los equipos totales
FILE_ESTADO_EQUIPOS="${DIR_CLOUD_LOCAL}estado_equipos.txt"

#SO compatibles
SO_COMPATIBLES="linux"
TIPO_SO_COMPATIBLES="linux1"

# Scripts locales UDP
SCRIPT_MENSAJE_UDP="${DIR_SCRIPTS_INTERNOS}./recibe_UDP.py"
SCRIPT_LANZAR_ESCUCHA="${DIR_SCRIPTS_INTERNOS}./start_listen.sh"
SCRIPT_PARAR_ESCUCHA="${DIR_SCRIPTS_INTERNOS}./stop_listen.sh"

# Scripts locales Envio
SCRIPT_ENCENDER="${DIR_LOCAL_ENVIO}00-encender-equipos-remotos.sh"
SCRIPT_REPARTIR_AUTO="${DIR_LOCAL_ENVIO}01A_02A-clonar_reparto_ficheros-Automatico.sh"
SCRIPT_CLONAR_ESTRUCTURA="${DIR_LOCAL_ENVIO}01B-clonar_estructura-Manual.sh"
SCRIPT_MONITORIZACION="${DIR_LOCAL_ENVIO}./01C-monitorizar_resultados_recibidos.sh"
SCRIPT_REPARTIR_MANUAL="${DIR_LOCAL_ENVIO}02B-reparto_ficheros_Manual-Generar_Listado.sh"
SCRIPT_ENVIO="${DIR_LOCAL_ENVIO}./03-comprimir_y_enviar_ficheros.sh"
SCRIPT_LANZAR="${DIR_LOCAL_ENVIO}./04-lanzar_tareas_remotas.sh"
SCRIP_RELANZAMIENTO="${DIR_LOCAL_ENVIO}./relanzamiento.sh"
SCRIPT_LIMPIAR_ENVIO="${DIR_LOCAL_ENVIO}zlimpiar.sh"
SCRIPT_CHECK_SSH="${DIR_LOCAL_ENVIO}checkSSH.sh"

# Scripts locales Recogida
SCRIPT_ESTADO="${DIR_LOCAL_RECOGIDAS}01-verEstado.sh"
SCRIPT_ESTADO_EQUIPOS="${DIR_LOCAL_RECOGIDAS}estado.sh"
#SCRIPT_ESTADO_NUM="${DIR_LOCAL_RECOGIDAS}01B-verEstado_Numero_ficheros.sh"
#SCRIPT_ESTADO_LISTA="${DIR_LOCAL_RECOGIDAS}01C-verEstado_Listado_ficheros.sh"
SCRIPT_RECOGER="${DIR_LOCAL_RECOGIDAS}02-recoger-resultados.sh"
SCRIPT_MATAR="${DIR_LOCAL_RECOGIDAS}03-matar_tareas_remotas.sh"
SCRIPT_LIMPIAR="${DIR_LOCAL_RECOGIDAS}04-limpiar_carpeta_equipos_remotos.sh"
SCRIPT_APAGAR="${DIR_LOCAL_RECOGIDAS}05-apagar-equipos-remotos.sh"
SCRIPT_LIMPIAR_RECOGIDAS="${DIR_LOCAL_RECOGIDAS}zlimpiar.sh"
SCRIPT_LIMPIAR_ESTADO="${DIR_LOCAL_RECOGIDAS}limpiar_estado.sh"
SCRIPT_LIMPIAR_TAREA="${DIR_LOCAL_RECOGIDAS}limpiar_tarea.sh"

# Ficheros a desplegar (en local)
#DIR_ESTRUCTURA_TAREA="${DIR_LOCAL_ENVIO}01A-Estructura_Tarea/"			# Ficheros de la Tarea a desplegar
DIR_ESTRUCTURA_TAREA="${DIR_TAREA}entrada/software_${NOMBRE_TAREA}/"			# Ficheros de la Tarea a desplegar
#DIR_FICHEROS_REPARTIR="${DIR_LOCAL_ENVIO}01B-Ficheros_analisis_a_repartir/"	# Ficheros a ANALIZAR a repartir entre los equipos
DIR_TAREA_ENTRADA="${DIR_TAREA}entrada/"										#Directorio de entrada de la tarea
DIR_FICHEROS_REPARTIR="${DIR_TAREA_ENTRADA}ficheros_entrada/"	# Ficheros a ANALIZAR a repartir entre los equipos
DIR_ESTRUCTURA_CLONADA="${DIR_LOCAL_ENVIO}02-Estructura_Clonada/"		# Copia de la Estrutura por cada equipo donde desplegar
#FICHERO_REPARTO="${DIR_ESTRUCTURA_CLONADA}Reparto_Ficheros_${NOMBRE_TAREA}.txt"	# Fichero con Resumen de Reparto de Ficheros
FICHERO_REPARTO="${DIR_TAREA}estado/Reparto_Ficheros_${NOMBRE_TAREA}.txt"			# Fichero con Resumen de Reparto de Ficheros
DIR_FILE_ANALISIS="${DIR_LOCAL_ENVIO}03-Ficheros_Desplegados/"			# Contiene fichero a enviar a cada equipo
EXT_FILE_ANALISIS="-${NOMBRE_TAREA}.tar.gz"
FILE_SCRIPT_REMOTO="script_remoto.sh"						# Fichero (sin ruta) con las tareas a realizar en el equipo remoto
FILE_SCRIPT_MONITORIZA_SALIDA="monitoriza_salida.sh"		# Fichero (sin ruta) de monitorización de la salida en equipo remoto
FILE_SCRIPT_ENVIA_UDP="envia_UDP.py"						# Fichero (sin ruta) que envía mensaje UDP cuando debe recogerse ficheros. Ejecutado en equipo remoto


# Datos equipo remoto
PREFIJO_NOMBRE_EQUIPO="lt"
CARPETA_TAREA="/opt/"
DIR_REMOTO="${CARPETA_TAREA}cluster/${NOMBRE_TAREA}/"					# Dir donde copiar ficheros a desplegar
DIR_REMOTO_ENVIO="${DIR_REMOTO}${DIR_ENVIO}"
DIR_REMOTO_ENVIO_DESCOMP="${DIR_REMOTO_ENVIO}${NOMBRE_TAREA}/"	#/opt/cluster/framework/01-Enviar_Tarea/framework/
DIR_REMOTO_RECOGIDA_INTERES="${DIR_REMOTO_ENVIO_DESCOMP}${SUBDIR_REMOTO_RECOGIDA}/"	# Dir con ficheros resultado a recoger
DIR_REMOTO_RECOGIDA="${DIR_REMOTO}${DIR_RECOGIDA}"				# Dir donde se guardan esos ficheros una vez procesados   /opt/cluster/framework/02-Recoger_Tarea/
DIR_REMOTO_EJECUCION="${DIR_REMOTO_ENVIO_DESCOMP}${DIR_ANALISIS}"		# Dir donde ubicarse para ejecutrar "SCRIPT_EJECUTAR"
DIR_REMOTO_ENTRADAS_FINALIZADAS="${DIR_REMOTO_ENVIO_DESCOMP}entradas_finalizadas/"


# Datos Ficheros recogida
FILE_RECOGIDA_RUTA="${DIR_REMOTO_RECOGIDA}"  #/opt/cluster/framework/02-Recoger_Tarea/
FILE_RECOGIDA_EXT="-${NOMBRE_TAREA}_Resultados.tar.gz"
#SUBDIR_LOCAL_RESULTADOS="${DIR_LOCAL_RECOGIDAS}Resultados/"			 # Ficheros resultados COMprimidos
#SUBDIR_LOCAL_RESULTADOS="${DIR_TAREA}salida/"			 # Ficheros resultados COMprimidos
SUBDIR_LOCAL_RESULTADOS_ESTADO="${DIR_TAREA}estado/"
SUBDIR_LOCAL_RESULTADOS_COMPRIMIDOS="${DIR_TAREA}salida/"							# Directorio donde se reciben resultados comprimidos
SUBDIR_LOCAL_RESULTADOS_DESCOMPRIMIDOS="${DIR_TAREA}salida/extraidos/"	# Ficheros resultados DEScomprimidos

# Estado TAREAS
CMD_SO_REMOTO='blkid | grep -F "$(mount | grep " / " | cut -d" " -f1)" | cut -d" " -f2 | cut -d"=" -f2 | cut -d "\"" -f2'
CMD_ESTADO_TAREA="ps ax | grep \"${PROCESO_PARA_ESTADO}\" | grep -v \"grep\" | grep -v -F \" cd \""
#FILE_ESTADO="${SUBDIR_LOCAL_RESULTADOS_ESTADO}Estado_${NOMBRE_TAREA}.txt"
#ESTADO_CON_NUM_FICHEROS="1"
CMD_ESTADO_TAREA_FICHEROS="ls -p -l \"${DIR_REMOTO_RECOGIDA_INTERES}${SUBDIR_ESTADO}\" | grep -v '/$' | grep -v '^total' | cut -d\" \" -f5-"
#FILE_ESTADO_NUM_FICHEROS="${SUBDIR_LOCAL_RESULTADOS_ESTADO}Estado_${NOMBRE_TAREA}-Numero_Ficheros.txt"
#ESTADO_CON_LISTA_FICHEROS="2"
#FILE_ESTADO_LISTA_FICHEROS="${SUBDIR_LOCAL_RESULTADOS_ESTADO}Estado_${NOMBRE_TAREA}-Lista_Ficheros.txt"
EXT_ESTADO_OLD="-old"										# Backup estados anteriores (para cron)
#FILE_ESTADO_OLD="${FILE_ESTADO}${EXT_ESTADO_OLD}"						# Util si equipos NO responden
#FILE_ESTADO_NUM_FICHEROS_OLD="${FILE_ESTADO_NUM_FICHEROS}${EXT_ESTADO_OLD}"
#FILE_ESTADO_LISTA_FICHEROS_OLD="${FILE_ESTADO_LISTA_FICHEROS}${EXT_ESTADO_OLD}"
FILE_ESTADO_LISTADO_FICHEROS="${SUBDIR_LOCAL_RESULTADOS_ESTADO}listado_ficheros.txt"
FILE_ESTADO="${SUBDIR_LOCAL_RESULTADOS_ESTADO}estado_${NOMBRE_TAREA}.txt"
FILE_NO_PROCESADOS="${SUBDIR_LOCAL_RESULTADOS_ESTADO}no_procesados.txt"
FILE_ESTADO_EQUIPOS_INICIAL="${SUBDIR_LOCAL_RESULTADOS_ESTADO}estado_equipos_inicial.txt"

#Modo rápido: evitar confirmaciones en el lanzamiento
FAST_MODE=1						#0-Desactivado
								#1-Activado

#Carpetas de tarea ya existente en equipo cliente
ANTE_CARPETA_TAREA_EXISTE=2		#0-Preguntar (al listar estado, al detectar el primer equipo, muestra pregunta sobre qué hacer -se ofrece 									"1" o "2"-)
								#1-Descartar equipo
								#2-Borrar carpeta existente

#Espacio del directorio remoto
ANTE_ESPACIO_CARPETA_INFERIOR_UMBRAL=2	#0-Preguntar (al listar estado, al detectar el primer equipo, muestra pregunta sobre qué hacer 											se ofrece "1" o "2"-)
										#1-Descartar equipo
										#2-Proseguir

#Variables usadas para expresar la disponibilidad de un equipo
DISPONIBLE="Disponible"
NO_DISPONIBLE="No disponible"

#Variables usadas para expresar el estado de una tarea
EJECUTANDOSE="Ejecutándose"
FINALIZADA="Finalizada"
INTERRUMPIDA="Interrumpida"

#Capacidad mínima del directorio de la tarea en equipo remoto (MB)
CARPETA_TAREA_UMBRAL_MINIMO="10000"

#Mensajes por análisis de directorios
CARPETA_EXISTENTE_1="[Carpeta Tarea YA existe]"
CARPETA_EXISTENTE_2="[Carpeta Tarea, Se vacía]"
CARPETA_SOLO_LECTURA="[Carpeta Tarea SOLO LECTURA]"

# CONEXION SSH
USER_REMOTO="root"
SSH_PASS="root"													# Pass para conexión sin certificado
SSH_OPCION_EVITAR_YES="-o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no"	# NOTA: ${SSH_EVITAR_YES} NO debe estar entre comillas,
											# para que se lea como VARIOS parametros
PUERTO_SSH="22"
SSH_OPCION_TIMEOUT="-o ConnectTimeout=5"						# Timeout de espera
SSH_OPCION_NO_WARNING="-o LogLevel=ERROR"						# No imprimir "Warnings" (Permanently added, ...), solo errores
SSH_OPCION_NO_PASS="-o PasswordAuthentication=no"				# No pedir contraseña (usado cuando se dispone de certificado)
SSH_OPCION_PORT="-o Port=${PUERTO_SSH}"							# Puerto ssh
SSH_OPCIONES="${SSH_OPCION_EVITAR_YES} ${SSH_OPCION_TIMEOUT} ${SSH_OPCION_NO_WARNING} ${SSH_OPCION_PORT}"
SSH_COMANDO_KEY="sshpass -p ${SSH_PASS} ssh ${SSH_OPCIONES}"
SCP_COMANDO_KEY="sshpass -p ${SSH_PASS} scp ${SSH_OPCIONES}"
SSH_COMANDO_CERTIFICADO="ssh ${SSH_OPCIONES} ${SSH_OPCION_NO_PASS}"
SCP_COMANDO_CERTIFICADO="scp ${SSH_OPCIONES} ${SSH_OPCION_NO_PASS}"
SSH_CERTIFICADO="SSH certificado"
SSH_KEY="Sin Certificado SSH. Disponible clave"
SIN_CONEXION_SERVICIO="Sin conexión SSH (Servicio SSH cerrado)"
SIN_CONEXION_CREDENCIALES="Sin conexión SSH (Problema de acceso)"

# VARIOS
VAR_MEMORIA_SALIR="/dev/shm/${NOMBRE_TAREA}-salir"				# Paso de parametros de hijos a padres para "Salir"
printf "0" > "${VAR_MEMORIA_SALIR}"


#Recogida automática - UDP
EQUIPO_SERVIDOR="${PREFIJO_NOMBRE_EQUIPO}03"
PUERTO_ESCUCHA_SERVIDOR="9999"
#SESION_BYOBU_RECOGIDA="cloud_recogida_automatica"	#Sesión creada en equipo local
SESION_BYOBU_MONITORIZA_SALIDA="monitoriza_salida"	#Sesión creada en equipo remoto
TIEMPO_ENTRE_REINTENTOS="5"	#tiempo que transcurre entre reenvío de mensaje UDP
NUM_MAX_REINTENTOS="5"	#Num máximo de intentos antes de dejar de enviar mensaje UDP


### Funciones
anadir_equipo_si_valido()
{
    EQUIP="$1"

    # Quitamos ceros iniciales
    EQUIP="${EQUIP#0}"

    # Debe ser un entero
    if [ -z "${EQUIP##*[!0-9-]*}" ]; then
	printf "\n\n### ERROR: Valor de equipo NO valido: %s\n" "${EQUIP}"
    else
	# Si esta entre 1-9 => Debe tener "0" delante "01-09"
	if [ "${EQUIP}" -ge 0 -a "${EQUIP}" -le 9 ]; then
	    if [ -z "${LISTA_PROCESADA}" ]; then
		LISTA_PROCESADA="0${EQUIP}"
	    else
		LISTA_PROCESADA="${LISTA_PROCESADA} 0${EQUIP}"
	    fi
	else
	    if [ -z "${LISTA_PROCESADA}" ]; then
		LISTA_PROCESADA="${EQUIP}"
	    else
		LISTA_PROCESADA="${LISTA_PROCESADA} ${EQUIP}"
	    fi
	fi
    fi
}

preparar_lista_equipos()
{
    [ "$1" != "" ] && EQUIPOS_LT="$1"

    LISTA_PROCESADA=""
    # Procesar rangos (e.g. "01-05" => "01 02 03 04 05")
    for e in ${EQUIPOS_LT}; do

	# Si tiene "-" (rango) => Procesarlo
	printf "%s" "${e}" | grep -F "-" 1>/dev/null 2>&1
	if [ "$?" = "0" ]; then
	    INICIO="$(printf "%s" "${e}" | cut -d"-" -f1)"
	    FIN="$(printf "%s" "${e}" | cut -d"-" -f2)"
	    for n in $(seq $INICIO $FIN); do
		anadir_equipo_si_valido "${n}"
	    done

	# SIN rango
	else
	    # Numero normal
	    anadir_equipo_si_valido "${e}"
	fi
    done

    EQUIPOS_LT="${LISTA_PROCESADA}"

	[ -z "${EQUIPOS_LT}" ] && { printf "\n\nNo se ha establecido ningun equipo (EQUIPOS_LT) de trabajo. Se sale...\n\n"; exit 1; }
}

if [ "${INVOCACION}" = "MENU_GLOBAL" ]; then
	 preparar_lista_equipos "${EQUIPOS_TOTALES_DISPONIBLES}"
else
	preparar_lista_equipos "$1"
fi
